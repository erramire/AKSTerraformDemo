el pass phrase es asea2021
pagina de referencia 
https://docs.microsoft.com/en-us/azure/developer/terraform/create-k8s-cluster-with-tf-and-aks

paso 1 generar ssh key con el siguiente comando:

ssh-keygen -m PEM -t rsa -b 4096

https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ssh-from-windows#create-an-ssh-key-pair

az storage container create -n tfstate --account-name <YourAzureStorageAccountName> --account-key <YourAzureStorageAccountKey>

terraform init

terraform plan -out main.tfplan

terraform apply main.tfplan

hacer esto para el rg de tfstate 
y para el storage account del mismo 

posteriormente crear el container del tfstate en el sa 

az storage container create -n tfstate --account-name saterraformedrm --account-key 7bMx21NHlnbQb/rMY+exYOmWsUWVfiJCfsZLw0pLOGZJYucOY/p4oV5JEUVhGxdnsCWSFk/hGC9qrVoEPqfEQA==

ahora se procede a crear el cluster de kubernetes 

terraform init -backend-config="storage_account_name=saterraformedrm" -backend-config="container_name=tfstate" -backend-config="access_key=7bMx21NHlnbQb/rMY+exYOmWsUWVfiJCfsZLw0pLOGZJYucOY/p4oV5JEUVhGxdnsCWSFk/hGC9qrVoEPqfEQA==" -backend-config="key=codelab.microsoft.tfstate"

az aks get-credentials --resource-group rg_ope_base_dev --name aksopebasedev
----------------

az group create --name rgdemoaksedrm --location southcentralus

az aks create -n aksclusedrm -g rgdemoaksedrm --network-plugin azure --enable-managed-identity

az network public-ip create -n agpublicipedrm -g rgdemoaksedrm --allocation-method Static --sku Standard
az network vnet create -n agvnetedrm -g rgdemoaksedrm --address-prefix 11.0.0.0/8 --subnet-name agsubnetedrm --subnet-prefix 11.1.0.0/16 
az network application-gateway create -n agwyedrm -l southcentralus -g rgdemoaksedrm --sku Standard_v2 --public-ip-address agpublicipedrm --vnet-name agvnetedrm --subnet agsubnetedrm

$appgwId=$(az network application-gateway show -n agwyedrm -g rgdemoaksedrm -o tsv --query "id") 
az aks enable-addons -n aksclusedrm -g rgdemoaksedrm -a ingress-appgw --appgw-id $appgwId

$nodeResourceGroup=$(az aks show -n aksclusedrm -g rgdemoaksedrm -o tsv --query "nodeResourceGroup")
$aksVnetName=$(az network vnet list -g $nodeResourceGroup -o tsv --query "[0].name")

--hice el peering manual porque con comandos no funciono

$aksVnetId=$(az network vnet show -n $aksVnetName -g $nodeResourceGroup -o tsv --query "id")
az network vnet peering create -n AppGWtoAKSVnetPeeringedrm -g rgdemoaksedrm --vnet-name agvnetedrm --remote-vnet $aksVnetId --allow-vnet-access

$appGWVnetId=$(az network vnet show -n agvnetedrm -g rgdemoaksedrm -o tsv --query "id")
az network vnet peering create -n AKStoAppGWVnetPeering -g $nodeResourceGroup --vnet-name $aksVnetName --remote-vnet $appGWVnetId --allow-vnet-access
---

az aks get-credentials -n aksclusedrm -g rgdemoaksedrm

------------

$appgwId=$(az network application-gateway show -n appgwyopebasedev -g rg_ope_base_dev -o tsv --query "id") 


az aks disable-addons -a ingress-appgw -n aksopebasedev -g rg_ope_base_dev

az aks enable-addons -n aksopebasedev -g rg_ope_base_dev -a ingress-appgw --appgw-id $appgwId

az aks get-credentials -n aksopebasedev -g rg_ope_base_dev

az aks update -n aksopebasedev -g rg_ope_base_dev --attach-acr acropebasedev
